CERTIFICATE SIGNING REQUEST (CSR) :=
      PUBLIC KEY +
      Distinguised Name (DN) :=
         + Common Name (CN)  (should be the exact Fully Qualified Domain Name (FQDN) of the host)
         + "additional information about your business or organization"

CERTIFICATE: (SELF) SIGNED CSR
*************************************************************************************************************************************************************************
* $ openssl version -a # GET OPENSSL VERSION AND BUILD(COMPILATION) OPTIONS:
*************************************************************************************************************************************************************************
* HANDLING CSRs AND CERTIFICATES:                                                       * PRIVATE KEYS
* -------------------------------                                                       * ------------
* SUBJ="/C=ES/ST=Aragon/L=Zaragoza/O=MyOrganization SA/CN=${DOMAIN}"                    * CREATE A PRIVATE KEY:
*                                                                                       *     $ openssl genrsa -des3 -out ${DOMAIN}.key 2048  # (Enter password when prompted)
* CREATE PRIVATE KEY (-newkey rsa:2048) + CSR (-new),                                   * 
*     Note: -nodes : *DO NOT* pass-phrase-encrypt PK:                                   * VERIFY (-check) PRIVATE KEY:
*     $  openssl req -newkey rsa:2048 -new -nodes -keyout ${DOMAIN}.key \               *     $ openssl rsa -check -in ${DOMAIN}.key
*        -out ${DOMAIN}.csr -subj "${SUBJ}"                                             * 
*                                                                                       * VERIFY PRIVATE KEY MATCHES CERTIFICATE & CSR:
* CREATE CSR (-new) FROM EXISTING PRIVATE KEY (-key ...):                               *     If the output of each of the next command is identical there is an
*     $ openssl req -new -key ${DOMAIN}.key -new -out ${DOMAIN}.csr -subj "${SUBJ}"     *     extremely high probability that the private key, certificate, and CSR are related:
*                                                                                       *     $ openssl rsa  -noout -modulus -in ${DOMAIN}.key | openssl md5
* CREATE PRIVATE KEY (-newkey rsa:2048) + AUTOGENERATED SELF-SIGNED-CERTIFICATE (-x509):*     $ openssl x509 -noout -modulus -in ${DOMAIN}.crt | openssl md5
*     $ openssl req -newkey rsa:2048 -nodes -keyout ${DOMAIN}.key -x509 \               *     $ openssl req  -noout -modulus -in ${DOMAIN}.csr | openssl md5
*       -days ${DAYS_TO_EXPIRE} -out ${DOMAIN}.crt -subj "${SUBJ}"                      * 
*       -x509: create self-signed cert                                                  * ENCRYPT/DECRYPT PRIVATE KEY
*                                                                                       *     $ openssl rsa -des3 -in unencrypted.key -out encrypted.key # encrypt
* AUTOGENERATED SELF-SIGNED-CERTIFICATE (-new -x509) FROM EXISTING PRIVATE KEY:         *     $ openssl rsa       -in encrypted.key   -out decrypted.key # decrypt
*     NOTE: For already existing csr use -in ${DOMAIN.csr} instead of -new:             *********************************************************************************
*     $ openssl req -key ${DOMAIN}.key -new -x509 -days ${DAYS_TO_EXPIRE} \             * CONVERTING certs FORMATS (Defaults to PEM):
*       -out ${DOMAIN}.crt -subj "${SUBJ}"                                              * -------------------------------------------
*                                                                                       * * PKCS7 files, also known as P7B, are typically used in Java Keystores and Microsoft IIS (Windows).
* EXAMPLE: VIEW(-text) AND VERIFY (-verify) CSR:                                        *   They are ASCII files which can contain certificates and CA certificates.
*     $ openssl req -text -noout -verify -in ${DOMAIN}.csr                              * * PKCS12 ( also known as PFX files) are typically used for import/export certs-chains in Micrsoft IIS
*                                                                                       *     $ openssl x509 -in ${DOMAIN}.crt -outform der -out ${DOMAIN}.der                   # PEM   -> DER
* EXAMPLE: VERIFY CERTIFICATE WAS SIGNED BY A CA:                                       *     $ openssl x509 -inform der -in ${DOMAIN}.der -out ${DOMAIN}.crt                    # DER   -> PEM
*     $ openssl verify -verbose -CAFile ca.crt ${DOMAIN}.crt                            *     $ openssl crl2pkcs7 -nocrl -certfile ${DOMAIN}.crt 
*                                                                                       *        -certfile ca-chain.crt -out ${DOMAIN}.p7b                                       # PEM   -> PKCS7
*                                                                                       *     $ openssl pkcs7 -in ${DOMAIN}.p7b -print_certs -out ${DOMAIN}.crt                  # PKCS7 -> PEM
*                                                                                       *     $ openssl pkcs12 -inkey ${DOMAIN}.key -in ${DOMAIN}.crt -export -out ${DOMAIN}.pfx # PEM -> PKCS12
*                                                                                       *     $ openssl pkcs12 -in ${DOMAIN}.pfx -nodes -out ${DOMAIN}.combined.crt              # PKCS12 -> PEM 
***************************************************************************************** *******************************************************************************
